{"version":3,"sources":["Utils.js","Config.js","Table.js","Title.js","App.js","serviceWorker.js","index.js"],"names":["Utils","range","start","stop","Array","from","length","_","i","Config","playerNames","playerOne","playerTwo","gameStates","ongoing","won","draw","handleFieldClick","state","action","currentPlayer","setPlayer","newState","console","log","fieldIndex","incRoundNumber","Table","props","initalState","fill","useReducer","fields","setFields","useEffect","board","setGameState","setWinner","includes","forEach","line","a","b","c","renderButton","id","content","getContentForState","className","key","onClick","gameState","playerName","setPlayerName","map","Title","message","roundNumber","winnerName","type","App","useState","player","setRoundNumber","winner","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"yQAKeA,EALD,CACVC,MAAO,SAACC,EAAOC,GAAR,OACHC,MAAMC,KAAK,CAAEC,OAAQH,EAAOD,EAAQ,IAAK,SAACK,EAAGC,GAAJ,OAAUN,EAAQM,OCUpDC,EAZA,CACXC,YAAa,CACTC,UAAW,IACXC,UAAW,KAEfC,WAAY,CACRC,QAAS,cACTC,IAAK,UACLC,KAAM,aCHRC,EAAmB,SAACC,EAAOC,GAC7B,IAAsBC,EAAeC,EAUjCC,EAAQ,YAAOJ,GAYnB,OAXAK,QAAQC,IAAI,UAAWL,EAAOM,YACE,MAA5BP,EAAMC,EAAOM,aACbF,QAAQC,IAAI,YACZF,EAASH,EAAOM,YAAcN,EAAOC,cAdnBA,EAgBLD,EAAOC,cAhBaC,EAgBEF,EAAOE,UAftCD,IAAkBX,EAAOC,YAAYC,UACrCU,EAAUZ,EAAOC,YAAYE,WACtBQ,IAAkBX,EAAOC,YAAYE,UAC5CS,EAAUZ,EAAOC,YAAYC,WAE7BY,QAAQC,IAAI,uBAWhBL,EAAOO,kBAEPH,QAAQC,IAAI,mBAGTF,GAwGIK,EAlED,SAAAC,GACV,IAAMC,EAAczB,MAAM,GAAG0B,KAAK,MADf,EAESC,qBAAWd,EAAkBY,GAFtC,mBAEZG,EAFY,KAEJC,EAFI,KAInBC,qBAAU,WAvCU,IAAAf,KAwCA,CACZgB,MAAOH,EACPI,aAAcR,EAAMQ,aACpBC,UAAWT,EAAMS,YA/BbF,MAAMG,SAAS,MAXN,CACjB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IASEC,SAAQ,SAAAC,GAAS,IAAD,cACPA,EADO,GAClBC,EADkB,KACfC,EADe,KACZC,EADY,KAEzB,GACIxB,EAAOgB,MAAMM,IACbtB,EAAOgB,MAAMM,KAAOtB,EAAOgB,MAAMO,IACjCvB,EAAOgB,MAAMO,KAAOvB,EAAOgB,MAAMQ,GAKjC,OAHApB,QAAQC,IAAI,gBAAkBL,EAAOgB,MAAMM,IAC3CtB,EAAOiB,aAAa3B,EAAOI,WAAWE,KACtCI,EAAOkB,UAAUlB,EAAOgB,MAAMM,IACvBtB,EAAOgB,MAAMM,OAfxBlB,QAAQC,IAAI,aACZL,EAAOiB,aAAa3B,EAAOI,WAAWG,SA+BvC,CAACgB,IAEJ,IAAMY,EAAe,SAACC,EAAI3B,GACtB,IAII4B,EAJuB,SAAA5B,GACvB,OAAgB,MAATA,EAAgB,IAAMA,EAGnB6B,CAAmB7B,GAEjC,OACI,yBACI8B,UAAU,aACVC,IAAKJ,EACLK,QAAS,WACLtB,EAAMuB,YAAc1C,EAAOI,WAAWC,QAChCmB,EAAU,CACNR,WAAYoB,EACZzB,cAAeQ,EAAMwB,WACrB/B,UAAWO,EAAMyB,cACjB3B,eAAgBE,EAAMF,eACtByB,UAAWvB,EAAMuB,YAErB5B,QAAQC,IAAI,mBAGrBsB,IAKb,OACI,yBAAKE,UAAU,SACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,aACVhD,EAAMC,MAAM,EAAG,GAAGqD,KAAI,SAAAT,GAAE,OAAID,EAAaC,EAAIb,EAAOa,QAEzD,yBAAKG,UAAU,aACVhD,EAAMC,MAAM,EAAG,GAAGqD,KAAI,SAAAT,GAAE,OAAID,EAAaC,EAAIb,EAAOa,QAEzD,yBAAKG,UAAU,aACVhD,EAAMC,MAAM,EAAG,GAAGqD,KAAI,SAAAT,GAAE,OAAID,EAAaC,EAAIb,EAAOa,WClF1DU,G,KA5BD,SAAA3B,GAcV,OACI,oCACI,uBAAGoB,UAAU,SAAb,eACA,mBAhBM,SAAApB,GACV,IAAI4B,EAAU,GASd,OARI5B,EAAMuB,YAAc1C,EAAOI,WAAWC,QACtC0C,EAAU,SAAW5B,EAAM6B,YAAc,KAAO7B,EAAMwB,WAC/CxB,EAAMuB,YAAc1C,EAAOI,WAAWE,IAC7CyC,EAAU,kBAAoB5B,EAAM8B,WAC7B9B,EAAMuB,YAAc1C,EAAOI,WAAWG,OAC7CwC,EAAU,SAGP,uBAAGR,UAAU,SAASQ,KAMzB,CACIG,KAAK,cACLP,WAAYxB,EAAMwB,WAClBK,YAAa7B,EAAM6B,YACnBN,UAAWvB,EAAMuB,UACjBO,WAAY9B,EAAM8B,gBCQnBE,EA9BH,WAAO,IAAD,EACcC,mBAASpD,EAAOC,YAAYC,WAD1C,mBACPmD,EADO,KACCzC,EADD,OAEwBwC,mBAAS,GAFjC,mBAEPJ,EAFO,KAEMM,EAFN,OAGcF,mBAAS,MAHvB,mBAGPG,EAHO,KAGC3B,EAHD,OAIoBwB,mBAASpD,EAAOI,WAAWC,SAJ/C,mBAIPqC,EAJO,KAIIf,EAJJ,KAMd,OACI,oCACI,yBAAKY,UAAU,OACX,kBAAC,EAAD,CACII,WAAYU,EACZL,YAAaA,EACbN,UAAWA,EACXO,WAAYM,IAEhB,yBAAKhB,UAAU,QACX,kBAAC,EAAD,CACII,WAAYU,EACZT,cAAehC,EACfK,eAAgB,kBAAMqC,EAAeN,EAAc,IACnDN,UAAWA,EACXf,aAAcA,EACdC,UAAWA,QChBf4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMzB,c","file":"static/js/main.62476a84.chunk.js","sourcesContent":["const Utils = {\n    range: (start, stop) =>\n        Array.from({ length: stop - start + 1 }, (_, i) => start + i)\n};\n\nexport default Utils;\n","const Config = {\n    playerNames: {\n        playerOne: 'X',\n        playerTwo: 'O'\n    },\n    gameStates: {\n        ongoing: 'playerRound',\n        won: 'gameWon',\n        draw: 'gameDraw'\n    }\n};\n\nexport default Config;\n","import React, { useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Utils from './Utils.js';\nimport Config from './Config.js';\n\nconst handleFieldClick = (state, action) => {\n    const changePlayer = (currentPlayer, setPlayer) => {\n        if (currentPlayer === Config.playerNames.playerOne) {\n            setPlayer(Config.playerNames.playerTwo);\n        } else if (currentPlayer === Config.playerNames.playerTwo) {\n            setPlayer(Config.playerNames.playerOne);\n        } else {\n            console.log('Unrecognized player');\n        }\n    };\n\n    let newState = [...state];\n    console.log('Clicked', action.fieldIndex);\n    if (state[action.fieldIndex] == null) {\n        console.log('New mark');\n        newState[action.fieldIndex] = action.currentPlayer;\n\n        changePlayer(action.currentPlayer, action.setPlayer);\n        action.incRoundNumber();\n    } else {\n        console.log('Already checked');\n    }\n\n    return newState;\n};\n\nconst calculateWinner = action => {\n    const winningLines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    if (!action.board.includes(null)) {\n        console.log('Game draw');\n        action.setGameState(Config.gameStates.draw);\n        return 'none';\n    }\n\n    winningLines.forEach(line => {\n        const [a, b, c] = line;\n        if (\n            action.board[a] &&\n            action.board[a] === action.board[b] &&\n            action.board[b] === action.board[c]\n        ) {\n            console.log('Game won by: ' + action.board[a]);\n            action.setGameState(Config.gameStates.won);\n            action.setWinner(action.board[a]);\n            return action.board[a];\n        }\n    });\n\n    return null;\n};\n\nconst Table = props => {\n    const initalState = Array(9).fill(null);\n    const [fields, setFields] = useReducer(handleFieldClick, initalState);\n\n    useEffect(() => {\n        calculateWinner({\n            board: fields,\n            setGameState: props.setGameState,\n            setWinner: props.setWinner\n        });\n    }, [fields]);\n\n    const renderButton = (id, state) => {\n        const getContentForState = state => {\n            return state == null ? '_' : state;\n        };\n\n        let content = getContentForState(state);\n\n        return (\n            <div\n                className=\"table-cell\"\n                key={id}\n                onClick={() => {\n                    props.gameState === Config.gameStates.ongoing\n                        ? setFields({\n                              fieldIndex: id,\n                              currentPlayer: props.playerName,\n                              setPlayer: props.setPlayerName,\n                              incRoundNumber: props.incRoundNumber,\n                              gameState: props.gameState\n                          })\n                        : console.log('Game is ended');\n                }}\n            >\n                {content}\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"table\">\n            <div className=\"table-body\">\n                <div className=\"table-row\">\n                    {Utils.range(0, 2).map(id => renderButton(id, fields[id]))}\n                </div>\n                <div className=\"table-row\">\n                    {Utils.range(3, 5).map(id => renderButton(id, fields[id]))}\n                </div>\n                <div className=\"table-row\">\n                    {Utils.range(6, 8).map(id => renderButton(id, fields[id]))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nTable.propTypes = {\n    playerName: PropTypes.string.isRequired,\n    setPlayerName: PropTypes.func.isRequired,\n    incRoundNumber: PropTypes.func.isRequired,\n    gameState: PropTypes.string.isRequired,\n    setGameState: PropTypes.func.isRequired,\n    setWinner: PropTypes.func.isRequired\n};\n\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Config from './Config.js';\n\nimport './styles.sass';\n\nconst Title = props => {\n    const Round = props => {\n        let message = '';\n        if (props.gameState === Config.gameStates.ongoing) {\n            message = 'Round ' + props.roundNumber + ': ' + props.playerName;\n        } else if (props.gameState === Config.gameStates.won) {\n            message = 'The winner is: ' + props.winnerName;\n        } else if (props.gameState === Config.gameStates.draw) {\n            message = 'Draw!';\n        }\n\n        return <p className=\"round\">{message}</p>;\n    };\n\n    return (\n        <>\n            <p className=\"title\">Tic Tac Toe</p>\n            <Round\n                type=\"playerRound\"\n                playerName={props.playerName}\n                roundNumber={props.roundNumber}\n                gameState={props.gameState}\n                winnerName={props.winnerName}\n            />\n        </>\n    );\n};\n\nexport default Title;\n\nTitle.propTypes = {\n    playerName: PropTypes.string.isRequired,\n    roundNumber: PropTypes.number.isRequired,\n    gameState: PropTypes.string.isRequired,\n    winnerName: PropTypes.string\n};\n","import React, { useState } from 'react';\nimport Table from './Table.js';\nimport Title from './Title.js';\nimport Config from './Config.js';\nimport './styles.sass';\n\nconst App = () => {\n    const [player, setPlayer] = useState(Config.playerNames.playerOne);\n    const [roundNumber, setRoundNumber] = useState(1);\n    const [winner, setWinner] = useState(null);\n    const [gameState, setGameState] = useState(Config.gameStates.ongoing);\n\n    return (\n        <>\n            <div className=\"app\">\n                <Title\n                    playerName={player}\n                    roundNumber={roundNumber}\n                    gameState={gameState}\n                    winnerName={winner}\n                />\n                <div className=\"game\">\n                    <Table\n                        playerName={player}\n                        setPlayerName={setPlayer}\n                        incRoundNumber={() => setRoundNumber(roundNumber + 1)}\n                        gameState={gameState}\n                        setGameState={setGameState}\n                        setWinner={setWinner}\n                    />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}